// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AdminRoles {
  SUPERADMIN
  ADMIN
  USER
}

enum UserRoles {
  DOCTOR
  NUTRITIONIST
  PHYSIOTHERAPIST
  DENTIST
}

enum Genders {
  MALE
  FEMALE
  OTHER
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String?
  avatar    String?
  adminRole AdminRoles @default(USER)
  userRole  UserRoles  @default(DOCTOR)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Patient {
  id                    String   @id @default(uuid())
  firstName             String
  firstSurname          String
  secondSurname         String
  dateOfBirth           DateTime
  gender                Genders
  phoneNumber           String
  street                String
  municipality          String
  state                 String
  emergencyContactName  String
  emergencyContactPhone String
  insuranceNumber       String
  registrationDate      DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  medicalHistory MedicalHistory[]
  medications    Medication[]
  appointments   Appointment[]
}

model MedicalHistory {
  id              String  @id @default(uuid())
  chronicDiseases String?
  allergies       String?
  surgeries       String?
  smoker          Boolean
  alcohol         Boolean
  drugs           Boolean
  patientId       String
  patient         Patient @relation(fields: [patientId], references: [id])

  @@index([patientId])
}

model Medication {
  id        String    @id @default(uuid())
  name      String
  dosage    String
  frequency String
  startDate DateTime
  endDate   DateTime?
  patientId String
  patient   Patient   @relation(fields: [patientId], references: [id])

  @@index([patientId])
}

model Appointment {
  id          String   @id @default(uuid())
  date        DateTime
  description String?
  notes       String?
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])

  @@index([patientId])
}

model AuthorizedEmails {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
